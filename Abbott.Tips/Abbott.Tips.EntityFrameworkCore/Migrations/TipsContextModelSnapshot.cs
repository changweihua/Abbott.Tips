// <auto-generated />
using System;
using Abbott.Tips.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Abbott.Tips.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(TipsContext))]
    partial class TipsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abbott.Tips.Model.Entities.ConfigurationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfigDescription");

                    b.Property<string>("ConfigName");

                    b.Property<int>("ConfigType");

                    b.Property<string>("ConfigValue");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<int>("EditMode");

                    b.Property<bool>("IsDeleted");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedTime");

                    b.HasKey("Id");

                    b.ToTable("T_Configuration");
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.GroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("GroupDescription");

                    b.Property<string>("GroupName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInherited");

                    b.Property<int?>("ParentGroupId");

                    b.Property<int?>("ParentId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("T_Group");
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.MenuModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MenuAction");

                    b.Property<string>("MenuController");

                    b.Property<string>("MenuLink");

                    b.Property<string>("MenuName");

                    b.Property<string>("MenuPermission");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ParentMenuId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("T_Menu");
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.OperationLogModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("OperationField");

                    b.Property<string>("OperationName");

                    b.Property<int>("OperationType");

                    b.Property<string>("OpertationTable");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedTime");

                    b.Property<string>("UserADName");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("T_OperationLog");
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.OrganizationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationLevel");

                    b.Property<string>("OrganizationName");

                    b.Property<int>("OrganizationStatus");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ParentOrganizationId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("ParentOrganizationId");

                    b.ToTable("T_Organization");
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.RegionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ParentRegionId");

                    b.Property<int>("RegionLevel");

                    b.Property<string>("RegionName");

                    b.Property<int>("RegionStatus");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("ParentRegionId");

                    b.ToTable("T_Region");
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.RoleMenuModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MenuId");

                    b.Property<int>("RoleId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("T_RoleMenu");
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.RoleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInherited");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ParentRoleId");

                    b.Property<string>("RoleDescription");

                    b.Property<string>("RoleName");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("T_Role");
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.UserGroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsDeleted");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("T_UserGroup");
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LoginName");

                    b.Property<string>("LoginPwd");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedTime");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("T_User");
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.UserRoleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("RoleId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("T_UserRole");
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.GroupModel", b =>
                {
                    b.HasOne("Abbott.Tips.Model.Entities.GroupModel", "ParentGroup")
                        .WithMany("SubGroups")
                        .HasForeignKey("ParentGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.MenuModel", b =>
                {
                    b.HasOne("Abbott.Tips.Model.Entities.MenuModel", "ParentMenu")
                        .WithMany("SubMenus")
                        .HasForeignKey("ParentMenuId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.OrganizationModel", b =>
                {
                    b.HasOne("Abbott.Tips.Model.Entities.OrganizationModel", "ParentOrganization")
                        .WithMany("SubOrganizations")
                        .HasForeignKey("ParentOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.RegionModel", b =>
                {
                    b.HasOne("Abbott.Tips.Model.Entities.RegionModel", "ParentRegion")
                        .WithMany("SubRegions")
                        .HasForeignKey("ParentRegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.RoleMenuModel", b =>
                {
                    b.HasOne("Abbott.Tips.Model.Entities.MenuModel", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Abbott.Tips.Model.Entities.RoleModel", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.RoleModel", b =>
                {
                    b.HasOne("Abbott.Tips.Model.Entities.RoleModel", "ParentRole")
                        .WithMany("SubRoles")
                        .HasForeignKey("ParentRoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.UserGroupModel", b =>
                {
                    b.HasOne("Abbott.Tips.Model.Entities.GroupModel", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Abbott.Tips.Model.Entities.UserModel", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Abbott.Tips.Model.Entities.UserRoleModel", b =>
                {
                    b.HasOne("Abbott.Tips.Model.Entities.RoleModel", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Abbott.Tips.Model.Entities.UserModel", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
